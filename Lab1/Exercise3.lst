                   ; Akash Badshah, Lab 1, Exercise 3
                   ; This is basic serial echo code, which takes in characters
                   ; echoes them back over serial. It also includes a crlf feat
                   ; after 65 characters and displays characters on the led ban
                   
                   ; The main loop or body of our typewriter program:
                   
0000:              .org 000h               ; power up and reset vector
0000: 02 01 00       ljmp start            ; when the micro wakes up, jump to t
                                           ; the main body or loop in the progr
                                           ; and located at address location 10
0100:              .org 100h
                   start:
0100: 12 01 14       lcall init            ; Start the serial port by calling s
                     setup:
0103: 78 41            mov r0, #65         ; set up register 0 with the value 6
                     loop:                 ; Now, endlessley repeat a loop that
0105: 12 01 21         lcall getchr        ; <- gets a character from the PC ke
0108: 12 01 2B         lcall sndchr        ; -> and then echoes the character t
010B: F5 90            mov p1, a           ; put the stored character from the 
010D: D8 F6            djnz r0, loop       ; keep the loop up if we haven't hit
010F: 12 01 33       lcall crlf            ; add a new line once we have printe
0112: 80 EF          sjmp setup
                   
                   init:
                   ; set up the serial port with a 11.0592 MHz crystal
                   ; use Timer 1 for 9600 baud serial communication
0114: 75 89 20       mov tmod, #20h        ; set timer 1 for auto reload - mode
0117: 75 88 40       mov tcon, #40h        ; run timer 1
011A: 75 8D FD       mov th1, #253         ; set 9600 baud with xtal=11.059mhz
011D: 75 98 50       mov scon, #50h        ; set serial control reg for 8 bit d
                                           ; and mode 1
0120: 22             ret
                   
                   getchr:
                   ; This routine "gets" or received a character from the PC, t
                   ; the serial port. RI is the same as SCON.0 - the assembler 
                   ; either shorthand. The 7-bit ASCII code is returned in the 
0121: 30 98 FD       jnb ri, getchr        ; wait till character received
0124: E5 99          mov a, sbuf           ; get character and put it in the ac
0126: 54 7F          anl a, #7fh           ; mask off the 8th bit
0128: C2 98          clr ri                ; clear serial "receive status" flag
012A: 22             ret
                   
                   sndchr:
                   ; This routine "sends" or transmits a character to the PC, u
                   ; port. The character to be sent is stored in the accumulato
                   ; TI are the same as far as the assembler is concerned.
012B: C2 99          clr ti                ; clear the ti complete flag
012D: F5 99          mov sbuf, a           ; move a character from acc to the s
                     txloop:
012F: 30 99 FD         jnb ti, txloop      ; wait till chr is sent
0132: 22             ret
                   
                   crlf:
                   ; This routine adds an autowrap by printing a carriage retur
                   ; printing a new line character
0133: 74 0A          mov a, #10         ; add the CR character to the accumulat
0135: 12 01 2B       lcall sndchr          ; send off the CR character
0138: 74 0D          mov a, #13         ; add the newline character to the accu
013A: 12 01 2B       lcall sndchr          ; send off the NL character
013D: 22             ret
                   
